- #f005 possibility to store / change / rate plans
    + every plan has to have some goal - matching a need or a requirement
    o every plan has to consist of one or more steps to reach that goal
    o need to manage requirements / prerequisits
    o an entity can rate the effectiveness of that plan to reach that goal
    o it should be possible to change and modify plans
    o needs trigger plans
    o entities can form 1 plan each tick
+ #f004 needs trigger vegetative actions #73561b6
+ #f003 remove private variables where possible - it's not very pythonic : entity.py location.py #a41779e
+ #f002 needs and their fulfillment #4238332
    + level of increase/decrease depending on the action
+ #f001 implement some kind of hunting #7d9fc64
+ some sort of graphical representation (what could it look like?) - very rudimentary but working
+ Logging
- TestCases - switch to test driven developement
- Failing to satisfy a need needs to have consequences
- Generate Terrain
    o generate a map of height distribution (x, y associated to a z-value)
    + convert a map of heights to flats (Delaunay Triangulation)
        + get new adjacent flats
    o ocean level
    o surface condition
    o waterflow
- Water
- Perception
    o seeing
        o direction, distance
        o get all objects in an given area (e.g. an triangle)
        o define field of view as an application of mathematics.flat
    o hearing
    o smelling
    o every entity provides notifications which all other entities can perceive    
- General Math
    + circumscribed circle
        + special case 100,75 > triangle is a line
            + test if a point is directly on one side of a triangle
    + point in circle
    o test if a vector intersects a triangle
- Pathfinding    
    o costs for different path (upwards / downwards / terrain condition)
- add persistence
- plans for resting
- interface: abort, pause, restart world via keyboard
- add biomes
    o distribution of trees/grass/plants
- general traces left behind (smell, trample, heat, ...)
- Factory for entity-creation (add needs, initial values, ...)
    o definition outside of the code, creating classes on startup or even during runtime (evolution)
- check sourroundings for vegetative functions
- BUG int / NONE
- construction of bodies
- making actions dependend of contruction of bodies
- feedback to actions (satisfaction, pain, ...)
- change internal states from attributes to objects
